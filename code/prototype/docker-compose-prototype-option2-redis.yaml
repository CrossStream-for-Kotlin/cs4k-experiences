version: "3.3"

services:
  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: tests/Dockerfile-postgres
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=changeit
      - POSTGRES_DB=db
    ports:
      - "5432:5432"

  redis:
      container_name: redis
      image: redis:alpine
      ports:
        - "6379:6379"

  spring-service:
    build:
      context: .
      dockerfile: tests/Dockerfile-spring
    depends_on:
      - postgres
      - redis
    command: ["scripts/wait-for-postgres.sh", "localhost"]
    # command: [ "scripts/wait-for-redis.sh", "redis", "6379" ]
    environment:
      PORT: 8080
      POSTGRESQL_DB_URL: "jdbc:postgresql://postgres:5432/db?user=dbuser&password=changeit"
      REDIS_PORT: "6379"
      REDIS_HOST: "redis"

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: tests/Dockerfile-nginx
    ports:
      - "8088:8088"
    depends_on:
      - spring-service

  # Just a machine running ubuntu, with 'dig' installed so that we can observe the docker compose environment.
  ubuntu:
    container_name: ubuntu
    build:
      context: .
      dockerfile: tests/Dockerfile-ubuntu
    tty: true

# -----------------------------------------------------------------------------------------------------------

# Redis cluster in containers environment does not work in communication between host (not Linux) and containers,
# because communication limitation:

# """ Redis Cluster and Docker
# Currently, Redis Cluster does not support NATted environments and in general
# environments where IP addresses or TCP ports are remapped.

# Docker uses a technique called port mapping: programs running inside Docker containers
# may be exposed with a different port compared to the one the program believes to be
# using. This is useful for running multiple containers using the same ports, at the same
# time, in the same server.

# To make Docker compatible with Redis Cluster, you need to use Docker's host networking mode.
# Please see the --net=host option in the Docker documentation for more
# information."""
#     see [https://redis.io/docs/latest/operate/oss_and_stack/management/scaling/]

# """ Host network driver
# The host networking driver only works on Linux hosts, but is available as a Beta feature, on Docker Desktop
# version 4.29 and later. """
#     see [https://docs.docker.com/network/drivers/host/]

# NOTE: WSL2 was used for testing, according to [https://redis.io/learn/operate/redis-at-scale/scalability/exercise-1].

# ---

#version: '3'

#networks:
#  redis-cluster-network:
#    driver: bridge
#
#services:
#
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379:6379"
#
#  redis-node-1:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7001:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-node-2:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7002:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-node-3:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7003:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-node-4:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7004:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-node-5:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7005:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-node-6:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    volumes:
#      - ./7006:/redis
#    command: redis-server /redis/redis.conf
#
#  redis-cluster-init:
#    image: redis:latest
#    network_mode: host
#      # networks:
#    # - redis-cluster-network
#    # command: redis-cli --cluster create redis-node-1:7001 redis-node-2:7002 redis-node-3:7003 redis-node-4:7004 redis-node-5:7005 redis-node-6:7006 --cluster-replicas 1 --cluster-yes
#    command: redis-cli --cluster create localhost:7001 localhost:7002 localhost:7003 localhost:7004 localhost:7005 localhost:7006 --cluster-replicas 1 --cluster-yes
#    depends_on:
#      - redis-node-1
#      - redis-node-2
#      - redis-node-3
#      - redis-node-4
#      - redis-node-5
#      - redis-node-6
